BOMBERMAN - EDITOR
program by: Or-Ram Atar(325004851) and Romi Sinizkey (322311457)

This project implements a Bomberman Level Editor that allows users to design and save custom game boards. The editor provides a graphical interface for placing and modifying game elements, including the player ('/'), guards ('!'), the door ('D'), rocks ('@'), and walls ('#').
first the program checks if "Board.txt" exist if not it asks the user for board dimensions 
then The user can interact with the editor through a toolbar and a grid-based editing area:

Toolbar: Contains buttons for selecting objects to place on the grid, clearing the grid, and saving the level.
Grid Area: Displays the editable game board, where users can position objects.
Controls: Mouse clicks interact with the toolbar and place objects on the grid.
Users can save their custom levels to a file (Board.txt) for use in gameplay.


the following files were already provided to us and were untouched: txt.CMakeLists,.
***note: we have added.
we added to the File resource that already exist, the pictures and the Toolbar.txt that used for the buttons order.
Added Files:
Board.h, Board.cpp: Manages the game board, its dimensions, and its content (loading, saving, clearing, and editing).
Toolbar.h, Toolbar.cpp: Handles the toolbar logic, including button placement, user interaction, and toolbar visuals.
WindowManager.h, WindowManager.cpp: Manages the overall window display and integrates the board and toolbar functionality.

    Buttons Options:
    Bomberman - can be placed everywhere without limit but there can be only one bomber man. 
    Door - can be placed once on the board and only on the borders.
    Robot - can be placed everywhere.
    Rock - can be placed everywhere without limits. 
    Save - saves the board to "Board.txt" file and is locating in debug repository.
    Delete - delete specific cell, based on the user choice. 
    Clear - close the window gets from the user new dimensions for the board and open a new empty board with those dimensions
    
Main Data Structures:
std::vector<std::vector<char>>: Represents the editable game board.
std::vector<std::string>: Stores object configurations and textures.
std::vector<sf::RectangleShape>: Represents toolbar buttons and grid cells graphically.

Special Algorithms:
Mouse Interaction Handling:

Maps mouse coordinates to toolbar or grid positions.
Determines the appropriate action based on the current selected tool.

File Saving and Loading:

Saves the current grid state to a Board.txt file, maintaining object types and positions.
Loads existing configurations for editing or validating file formats.

Design Overview:
Objects:
Board: Represents the game grid, including its layout and content. Handles operations like clearing, updating, and saving the grid.
Toolbar: Provides an interactive interface for selecting tools and managing the editor.
WindowManager: Combines the toolbar and board functionality, ensuring smooth interactions between user actions and visual updates.

Interactions:
Toolbar to Board: The toolbar sends user-selected object types to the board for placement.
Board to Toolbar: The board updates the toolbar (e.g., when clearing or saving).
WindowManager: Manages event handling, rendering, and communication between the board and toolbar.

notes: 
we have limited the user to enter dimensions of board up to 25X25 since above it, the board looks too full and not aesthetic
